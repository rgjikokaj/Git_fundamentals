What is Git and how is it different than GitHub?
 
Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows. Git is installed and maintained on your local system rather than the cloud. It was first developed in 2005, and the thing that sets it apart is its branching model. On the other hand, GitHub is designed as a Git repository hosting service, and it is exclusively cloud-based. You can share your code with others, giving them the power to make revisions or edits. Therefore, GitHub is a cloud-based hosting service.
 
Why do we use Terminal?
The word terminal comes from early computer systems that were used to send commands to other computers. Terminals often consist of just a keyboard and monitor, with a connection to another computer. The purpose of a terminal is not to process information like a typical computer, but to send commands to another system. For example, a network administrator may use a terminal to log in to a network and manage devices connected to the network. Terminals, also known as command lines or consoles, allow us to accomplish and automate tasks on a computer without the use of a graphical user interface. Using a terminal allows us to send simple text commands to our computer to do things like navigate through a directory or copy a file and form the basis for many more complex automation and programming skills. With modern computers, the word terminal usually refers to a terminal program, or emulator, which provides a text-based interface for typing commands. Terminal programs are available for all major computing platforms and are typically included with the operating system.
 
Explain 3 benefits of version control in your own words.
        	Version control is the ability to manage the change and configuration of an application. Versioning is a priceless process, especially when you have multiple developers working on a single application because it allows them to easily share files. Without version control, developers will eventually step on each other’s toes and overwrite code changes that someone else may have completed without even realizing it. Using these systems allows you to check files out for modifications, then, during check-in, if the files have been changed by another user, you will be alerted and allowed to merge them. needed prior to committing any code. Versioning is also a great way to keep track of application builds by being able to identify which version is currently in development, QA, and production. Also, when new developers join the team, they can easily download the current version of the application to their local environment using the version control system and are able to keep track of the version they’re currently running. During development, you can also have entirely independent code versions if you prefer to keep different development efforts separate. When ready, you can merge the files to create a final working version. Another great use for versioning is when troubleshooting an issue, you are able to easily compare different versions of files to track differences. You can compare the last working file with the faulty file, decreasing the time spent identifying the cause of an issue. If the user decides to roll back the changes, you can implement the last working file by using the correct version.
